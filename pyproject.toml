[project]
name = "pytest-capsqlalchemy"
version = "0.0.1"
description = "Pytest plugin to allow capturing SQLAlchemy queries."
authors = [{ name = "SoftwareOne AG" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.9,<4.0"
license = "Apache-2.0"
classifiers = [
  "Intended Audience :: Developers",
  "Development Status :: 4 - Beta",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Framework :: AsyncIO",
  "Framework :: Pytest",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Testing",
  "Topic :: Database :: Front-Ends",
  "Typing :: Typed",
]
dependencies = ["sqlalchemy[asyncio]>=2.0.38"]

[project.urls]
Homepage = "https://softwareone-platform.github.io/pytest-capsqlalchemy/"
Repository = "https://github.com/softwareone-platform/pytest-capsqlalchemy"
Documentation = "https://softwareone-platform.github.io/pytest-capsqlalchemy/"

[project.entry-points.pytest11]
pytest_capsqlalchemy = "pytest_capsqlalchemy.plugin"

[dependency-groups]
dev = [
  "pytest>=7.2.0",
  "pre-commit>=2.20.0",
  "tox-uv>=1.11.3",
  "mypy>=0.991",
  "ruff>=0.9.2",
  "mkdocs>=1.4.2",
  "mkdocs-material>=8.5.10",
  "mkdocstrings[python]>=0.26.1",
  "asyncpg>=0.30.0",
  "pytest-asyncio>=0.25.3",
  "pytest-dotenv>=0.5.2",
  "pytest-cov>=6.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.setuptools]
py-modules = ["pytest_capsqlalchemy"]

[tool.mypy]
files = ["pytest_capsqlalchemy"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
# NOTE: -p 'no:capsqlalchemy' disables this plugin during tests for accurate code coverage
addopts = """
  --cov=pytest_capsqlalchemy
  --cov-report=term-missing
  --cov-report=html
  --cov-report=xml
  -p 'no:capsqlalchemy'
"""
pytester_example_dir = "examples"

[tool.ruff]
line-length = 120
fix = true

[tool.ruff.lint]
preview = true # enable linting rules in preview
select = [
  "YTT", # flake8-2020
  "S",   # flake8-bandit
  "B",   # flake8-bugbear
  "A",   # flake8-builtins
  "C4",  # flake8-comprehensions
  "T10", # flake8-debugger
  "SIM", # flake8-simplify
  "I",   # isort
  "C90", # mccabe
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "PGH", # pygrep-hooks
  "UP",  # pyupgrade
  "RUF", # ruff
  "DOC", # pydoclint
  "D",   # pydocstyle
]
ignore = [
  "E731",   # DoNotAssignLambda
  "S101",   # assert
  "D100",   # Missing docstring in public module
  "D104",   # Missing docstring in public package
  "D105",   # Missing docstring in magic method
  "DOC402", # yield is not documented in docstring
  "DOC502", # Raised exception is not explicitly raised
]

[tool.ruff.lint.per-file-ignores]
"examples/*" = ["D", "DOC"]
"tests/*" = ["D", "DOC"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
preview = true
docstring-code-format = true

[tool.coverage.run]
branch = true
source = ["pytest_capsqlalchemy"]
relative_files = true
# SQLAlchemy uses greenlets to pass context, so we need to specify this here,
# so that the coverage is calculated correctly. 'thread' is the default value,
# so including it in case some code relies on it
#
# refs:
#     * https://coverage.readthedocs.io/en/7.6.9/config.html#run-concurrency
#     * https://github.com/nedbat/coveragepy/issues/1082
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
show_missing = true
exclude_lines = ["pragma: no cover", "pragma: no branch", "NotImplementedError"]
