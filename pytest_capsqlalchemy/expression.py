import enum
from dataclasses import dataclass, field
from typing import Any

from sqlalchemy import ClauseElement, Executable, Insert, TextClause, text


class SQLExpressionType(str, enum.Enum):
    """An enumeration of the different types of SQL expressions that can be captured."""

    SELECT = "SELECT"
    INSERT = "INSERT"
    UPDATE = "UPDATE"
    DELETE = "DELETE"
    BEGIN = "BEGIN"
    COMMIT = "COMMIT"
    ROLLBACK = "ROLLBACK"
    UNKNOWN = "UNKNOWN"

    @property
    def is_tcl(self) -> bool:
        """Check if the SQL expression type is a transaction control language statement."""
        return self in {SQLExpressionType.BEGIN, SQLExpressionType.COMMIT, SQLExpressionType.ROLLBACK}


@dataclass
class SQLExpression:
    """A representation of a single SQL expression captured by SQLAlchemy.

    Stores the SQLAlchemy `Executable` object and any parameters used in the query, so that it can be
    compared against expected queries in tests. This is useful for performing specific assertions
    on the captured expressions which cannot be easily achieved with the provided assert methods.
    """

    executable: Executable
    params: dict[str, Any] = field(default_factory=dict)
    multiparams: list[dict[str, Any]] = field(default_factory=list)

    def get_sql(self, *, bind_params: bool = False) -> str:
        """Get the SQL string generated by SQLAlchemy of the captured expression.

        Args:
            bind_params: If True, the SQL string will include the bound parameters in the query. Otherwise the
                SQL string will contain placeholders for the bound parameters.

        Returns:
            The SQL string of the captured expression
        """
        assert isinstance(self.executable, ClauseElement)

        if self.executable.is_insert:
            assert isinstance(self.executable, Insert)

            if self.multiparams:
                expr = self.executable.values(self.multiparams)
            elif self.params:
                expr = self.executable.values(self.params)
            else:
                expr = self.executable
        else:
            expr = self.executable

        compile_kwargs = {}
        if bind_params:
            compile_kwargs["literal_binds"] = True

        return str(expr.compile(compile_kwargs=compile_kwargs))

    @property
    def type(self) -> SQLExpressionType:
        """Get the type of the captured SQL expression."""
        if self.executable.is_insert:
            return SQLExpressionType.INSERT

        if self.executable.is_select:
            return SQLExpressionType.SELECT

        if self.executable.is_update:
            return SQLExpressionType.UPDATE

        if self.executable.is_delete:
            return SQLExpressionType.DELETE

        if isinstance(self.executable, TextClause):
            if self.executable.compare(text("BEGIN")):
                return SQLExpressionType.BEGIN

            if self.executable.compare(text("COMMIT")):
                return SQLExpressionType.COMMIT

            if self.executable.compare(text("ROLLBACK")):
                return SQLExpressionType.ROLLBACK

        return SQLExpressionType.UNKNOWN
